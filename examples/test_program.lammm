(def foo (foo) (foo) [foo foo])(def ListMap (f xs) (then)
  [xs
   (case ((Nil         [(Nil) then])
          (Cons (x xs) [(Cons ((mu xThen [f (Ap (x) (xThen))])
                               (mu xsThen (ListMap (f xs) (xsThen)))))
                        then])))])
(def PairSum (p) (then)
  [p (case ((Pair (a b) (+ a b then))))])
(ListMap ((cocase ((Ap (p) (then) (PairSum (p) (then)))))
          (Cons ((Pair (1 2)) (Cons ((Pair (3 4)) (Nil))))))
         (<END>))
(- 2 2 (mu' x (ifz x [123 <END>] [x <END>])))